{
	"info": {
		"_postman_id": "d793de1d-3385-495c-bee4-2326df8a0f45",
		"name": "Coderr/",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "47254400",
		"_collection_link": "https://stephengl-151457.postman.co/workspace/Steph-Engl's-Workspace~731c5851-d4ee-48d1-802b-7d64ce3ffee6/collection/47254400-d793de1d-3385-495c-bee4-2326df8a0f45?action=share&source=collection_link&creator=47254400"
	},
	"item": [
		{
			"name": "Happy path",
			"item": [
				{
					"name": "Auth",
					"item": [
						{
							"name": "register_user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const username = pm.variables.replaceIn(\"{{$randomUserName}}\")\r",
											"const email = pm.variables.replaceIn(\"{{$randomEmail}}\")\r",
											"\r",
											"pm.variables.set('username', username)\r",
											"pm.variables.set('email', email)\r",
											"\r",
											"console.log(username, email)"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE = pm.response;\r",
											"\r",
											"pm.test(\"Statuscode is 201 when registration was successfully.\", () => {\r",
											"    pm.expect(RESPONSE).to.have.status(201);\r",
											"})\r",
											"\r",
											"pm.test(\"Username wurde korrekt gespeichert\", () => {\r",
											"    const username = pm.variables.get(\"username\")\r",
											"\r",
											"    if (username && pm.response.code === 201) {\r",
											"        pm.environment.set(\"username\", username)\r",
											"        pm.expect(true).to.be.true\r",
											"        console.log(username)\r",
											"    } else {\r",
											"        pm.expect.fail();\r",
											"    }\r",
											"})\r",
											"\r",
											"pm.test(\"Email wurde korrekt gespeichert\", () => {\r",
											"    const email = pm.variables.get(\"email\")\r",
											"\r",
											"    if (email && pm.response.code === 201) {\r",
											"        pm.environment.set(\"email\", email)\r",
											"        pm.expect(true).to.be.true\r",
											"        console.log(email)\r",
											"    } else {\r",
											"        pm.expect.fail();\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{username}}\",\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"asdasdasd\",\r\n  \"repeated_password\": \"asdasdasd\",\r\n  \"type\": \"customer\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}api/registration/",
									"host": [
										"{{base_url}}api"
									],
									"path": [
										"registration",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "login_user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE = pm.response;\r",
											"const RESPONSEJSON = RESPONSE.json();\r",
											"\r",
											"pm.test(\"Statuscode is 200 when login was successfully.\", () => {\r",
											"    pm.expect(RESPONSE).to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test(\"Token ist Ã¼bergeben worden bei erfolgreichem Login\", () => {\r",
											"    try {\r",
											"        pm.expect(RESPONSEJSON).to.have.property(\"token\");\r",
											"    } catch (error) {\r",
											"        pm.expect.fail(\"Response ist kein valides JSON: \" + error);\r",
											"    }\r",
											"})\r",
											"\r",
											"pm.test(\"Token wurde korrekt gespeichert\", () => {\r",
											"    if (pm.response.code === 200) {\r",
											"        pm.environment.set(\"user_token\", RESPONSEJSON.token);\r",
											"        pm.expect(true).to.be.true;\r",
											"    } else {\r",
											"        pm.expect.fail();\r",
											"    }\r",
											"})\r",
											"\r",
											"pm.test(\"Response content type is application/json\", function () {\r",
											"    pm.expect(RESPONSE.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"asdasdasd\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}api/login/",
									"host": [
										"{{base_url}}api"
									],
									"path": [
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "logout_user",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{user_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}api/logout/",
									"host": [
										"{{base_url}}api"
									],
									"path": [
										"logout",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "profile/{pk}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE = pm.response;\r",
											"const RESPONSE_JSON = RESPONSE.json();\r",
											"\r",
											"pm.test(\"200 - Profile data successfully retrieved\", () => {\r",
											"    pm.expect(RESPONSE.code).to.eql(200);\r",
											"})\r",
											"\r",
											"pm.test(\"Response contains required profile fields\", () => {\r",
											"    const requiredFields = [\r",
											"        \"user\", \"username\", \"first_name\", \"last_name\", \"file\",\r",
											"        \"location\", \"tel\", \"description\", \"working_hours\", \"type\",\r",
											"        \"email\", \"created_at\"\r",
											"    ];\r",
											"\r",
											"    requiredFields.forEach(field => {\r",
											"        pm.expect(RESPONSE_JSON).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Fields should be never null but empty string allowed if no value\", () => {\r",
											"    const emptyStringFields = [\"first_name\", \"last_name\", \"location\", \"tel\", \"description\", \"working_hours\"]\r",
											"\r",
											"    emptyStringFields.forEach(field => {\r",
											"        pm.expect(RESPONSE_JSON[field]).to.not.be.null;\r",
											"        pm.expect(RESPONSE_JSON[field]).to.be.a('string');\r",
											"    });\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{user_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}api/profile/25/",
									"host": [
										"{{base_url}}api"
									],
									"path": [
										"profile",
										"25",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "profile/{pk}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE = pm.response;\r",
											"const RESPONSE_JSON = RESPONSE.json();\r",
											"\r",
											"pm.test(\"200 - Profile data successfully retrieved\", () => {\r",
											"    pm.expect(RESPONSE.code).to.eql(200);\r",
											"})\r",
											"\r",
											"pm.test(\"Response contains required profile fields\", () => {\r",
											"    const requiredFields = [\r",
											"        \"user\", \"username\", \"first_name\", \"last_name\", \"file\",\r",
											"        \"location\", \"tel\", \"description\", \"working_hours\", \"type\",\r",
											"        \"email\", \"created_at\"\r",
											"    ];\r",
											"\r",
											"    requiredFields.forEach(field => {\r",
											"        pm.expect(RESPONSE_JSON).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Fields should be never null but empty string allowed if no value\", () => {\r",
											"    const emptyStringFields = [\"first_name\", \"last_name\", \"location\", \"tel\", \"description\", \"working_hours\"]\r",
											"\r",
											"    emptyStringFields.forEach(field => {\r",
											"        pm.expect(RESPONSE_JSON[field]).to.not.be.null;\r",
											"        pm.expect(RESPONSE_JSON[field]).to.be.a('string');\r",
											"    });\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{user_token_id27}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"first_name\": \"Mila\",\r\n  \"last_name\": \"Moppelina\",\r\n  \"location\": \"Berlin\",\r\n  \"tel\": \"987654321\",\r\n  \"description\": \"Updated business description\",\r\n  \"working_hours\": \"10-18\",\r\n  \"email\": \"new_email@business.de\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}api/profile/27/",
									"host": [
										"{{base_url}}api"
									],
									"path": [
										"profile",
										"27",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "profile/business/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE = pm.response;\r",
											"const RESPONSE_JSON = RESPONSE.json();\r",
											"\r",
											"\r",
											"pm.test(\"200 - Profile data successfully retrieved\", () => {\r",
											"    pm.expect(RESPONSE.code).to.eql(200);\r",
											"})\r",
											"\r",
											"\r",
											"pm.test(\"Response contains a list of business users with profile information\", function () {\r",
											"    pm.expect(RESPONSE_JSON).to.be.an('array').that.is.not.empty;\r",
											"\r",
											"    RESPONSE_JSON.forEach(user => {\r",
											"        pm.expect(user).to.have.all.keys(\"user\", \"username\", \"first_name\", \"last_name\", \"file\", \"location\", \"tel\", \"description\", \"working_hours\", \"type\");\r",
											"        \r",
											"        pm.expect(user.first_name).to.exist.and.to.be.a('string').and.to.satisfy(val => val !== null ? val !== '' : true);\r",
											"        pm.expect(user.last_name).to.exist.and.to.be.a('string').and.to.satisfy(val => val !== null ? val !== '' : true);\r",
											"        pm.expect(user.location).to.exist.and.to.be.a('string').and.to.satisfy(val => val !== null ? val !== '' : true);\r",
											"        pm.expect(user.tel).to.exist.and.to.be.a('string').and.to.satisfy(val => val !== null ? val !== '' : true);\r",
											"        pm.expect(user.description).to.exist.and.to.be.a('string').and.to.satisfy(val => val !== null ? val !== '' : true);\r",
											"        pm.expect(user.working_hours).to.exist.and.to.be.a('string').and.to.satisfy(val => val !== null ? val !== '' : true);\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}api/profile/business/",
									"host": [
										"{{base_url}}api"
									],
									"path": [
										"profile",
										"business",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "profile/customer/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE = pm.response;\r",
											"const RESPONSE_JSON = RESPONSE.json();\r",
											"\r",
											"pm.test(\"200 - Profile data successfully retrieved\", () => {\r",
											"    pm.expect(RESPONSE.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains a list of customers with profile information\", function () {\r",
											"    pm.expect(RESPONSE_JSON).to.be.an('array').that.is.not.empty;\r",
											"\r",
											"    RESPONSE_JSON.forEach(user => {\r",
											"        pm.expect(user).to.have.all.keys(\"user\", \"username\", \"first_name\", \"last_name\", \"file\", \"uploaded_at\", \"type\");\r",
											"        \r",
											"        pm.expect(user.first_name).to.exist.and.to.be.a('string').and.to.satisfy(val => val !== null);\r",
											"        pm.expect(user.last_name).to.exist.and.to.be.a('string').and.to.satisfy(val => val !== null);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}api/profile/customer/",
									"host": [
										"{{base_url}}api"
									],
									"path": [
										"profile",
										"customer",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Offers",
					"item": [
						{
							"name": "offers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE = pm.response;\r",
											"const RESPONSE_JSON = RESPONSE.json();\r",
											"\r",
											"pm.test(\"200 - All offers successfully retrieved\", () => {\r",
											"    pm.expect(RESPONSE.code).to.eql(200);\r",
											"})\r",
											"\r",
											"pm.test(\"Response contains required profile fields\", () => {\r",
											"    const requiredFields = [\r",
											"        \"count\", \"next\", \"previous\", \"results\"\r",
											"    ];\r",
											"\r",
											"    requiredFields.forEach(field => {\r",
											"        pm.expect(RESPONSE_JSON).to.have.property(field);\r",
											"    });\r",
											"\r",
											"    // Check if results is an array\r",
											"    pm.expect(RESPONSE_JSON.results).to.be.an('array');\r",
											"\r",
											"    // If results is not empty, check required fields in the first result\r",
											"    if (RESPONSE_JSON.results.length > 0) {\r",
											"        const requiredResultFields = [\r",
											"            \"id\", \"title\", \"image\", \"description\", \"details\"\r",
											"        ];\r",
											"\r",
											"        requiredResultFields.forEach(field => {\r",
											"            pm.expect(RESPONSE_JSON.results[0]).to.have.property(field);\r",
											"        });\r",
											"\r",
											"        // Check user_details fields if user_details is present\r",
											"        if (RESPONSE_JSON.results[0].details) {\r",
											"            const requiredUserDetailsFields = [\r",
											"                \"id\", \"title\", \"revisions\", \"delivery_time_in_days\", \"price\", \"features\", \"offer_type\"\r",
											"            ];\r",
											"\r",
											"            requiredUserDetailsFields.forEach(field => {\r",
											"                pm.expect(RESPONSE_JSON.results[0].user_details).to.have.property(field);\r",
											"            });\r",
											"        }\r",
											"\r",
											"        // Check details array if present\r",
											"        if (RESPONSE_JSON.results[0].details) {\r",
											"            pm.expect(RESPONSE_JSON.results[0].details).to.be.an('array');\r",
											"\r",
											"            // Check required fields in each detail\r",
											"            RESPONSE_JSON.results[0].details.forEach(detail => {\r",
											"                pm.expect(detail).to.have.property('id');\r",
											"                pm.expect(detail).to.have.property('url');\r",
											"            });\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}api/offers/",
									"host": [
										"{{base_url}}api"
									],
									"path": [
										"offers",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "offers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE = pm.response;\r",
											"const RESPONSE_JSON = RESPONSE.json();\r",
											"\r",
											"pm.test(\"201 - Offer successfully created\", () => {\r",
											"    pm.expect(RESPONSE.code).to.eql(201);\r",
											"})\r",
											"\r",
											"pm.test(\"Response contains required profile fields\", () => {\r",
											"    const response = pm.response.json();\r",
											"    const requiredFields = [\r",
											"        \"id\", \"title\", \"image\", \"description\", \"details\"\r",
											"    ];\r",
											"\r",
											"    requiredFields.forEach(field => {\r",
											"        pm.expect(response).to.have.property(field);\r",
											"    });\r",
											"\r",
											"    // Check if details is an array and contains exactly 3 items\r",
											"    pm.expect(response.details).to.be.an('array').that.has.lengthOf(3);\r",
											"\r",
											"    // Check required fields in each detail\r",
											"    response.details.forEach(detail => {\r",
											"        const requiredOfferDetailsFields = [\r",
											"            \"id\", \"title\", \"revisions\", \"delivery_time_in_days\", \"price\", \"features\", \"offer_type\"\r",
											"        ];\r",
											"\r",
											"        requiredOfferDetailsFields.forEach(field => {\r",
											"            pm.expect(detail).to.have.property(field);\r",
											"        });\r",
											"\r",
											"        // Check if features is an array\r",
											"        pm.expect(detail.features).to.be.an('array');\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{user_token_id25_b}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Grafikdesign-Paket\",\r\n  \"image\": null,\r\n  \"description\": \"Ein umfassendes Grafikdesign-Paket fÃ¼r Unternehmen.\",\r\n  \"details\": [\r\n    {\r\n      \"title\": \"Basic Design\",\r\n      \"revisions\": 2,\r\n      \"delivery_time_in_days\": 5,\r\n      \"price\": 100,\r\n      \"features\": [\r\n        \"Logo Design\",\r\n        \"Visitenkarte\"\r\n      ],\r\n      \"offer_type\": \"basic\"\r\n    },\r\n    {\r\n      \"title\": \"Standard Design\",\r\n      \"revisions\": 5,\r\n      \"delivery_time_in_days\": 7,\r\n      \"price\": 200,\r\n      \"features\": [\r\n        \"Logo Design\",\r\n        \"Visitenkarte\",\r\n        \"Briefpapier\"\r\n      ],\r\n      \"offer_type\": \"standard\"\r\n    },\r\n    {\r\n      \"title\": \"Premium Design\",\r\n      \"revisions\": 10,\r\n      \"delivery_time_in_days\": 10,\r\n      \"price\": 500,\r\n      \"features\": [\r\n        \"Logo Design\",\r\n        \"Visitenkarte\",\r\n        \"Briefpapier\",\r\n        \"Flyer\"\r\n      ],\r\n      \"offer_type\": \"premium\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}api/offers/",
									"host": [
										"{{base_url}}api"
									],
									"path": [
										"offers",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "offers/id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE = pm.response;\r",
											"const RESPONSE_JSON = RESPONSE.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(RESPONSE.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has a valid offer\", () => {\r",
											"    const requiredFields = ['id', 'user', 'title', 'image', 'description', 'created_at', 'updated_at', 'details', 'min_price', 'min_delivery_time'];\r",
											"    requiredFields.forEach(field => {\r",
											"        pm.expect(RESPONSE_JSON).to.have.property(field);\r",
											"    });\r",
											"\r",
											"    pm.expect(RESPONSE_JSON.details).to.be.an('array');\r",
											"\r",
											"    // Check that each detail has the required fields id and url\r",
											"    RESPONSE_JSON.details.forEach(detail => {\r",
											"        pm.expect(detail).to.have.property('id');\r",
											"        pm.expect(detail).to.have.property('url');\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/offers/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"offers",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "offers/id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE = pm.response;\r",
											"const RESPONSE_JSON = RESPONSE.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.expect(RESPONSE.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains required profile fields\", () => {\r",
											"    const response = pm.response.json();\r",
											"    const requiredFields = [\r",
											"        \"id\", \"title\", \"image\", \"description\", \"details\"\r",
											"    ];\r",
											"\r",
											"    requiredFields.forEach(field => {\r",
											"        pm.expect(response).to.have.property(field);\r",
											"    });\r",
											"\r",
											"    // Check if details is an array and contains exactly 3 items\r",
											"    pm.expect(response.details).to.be.an('array').that.has.lengthOf(3);\r",
											"\r",
											"    // Check required fields in each detail\r",
											"    response.details.forEach(detail => {\r",
											"        const requiredOfferDetailsFields = [\r",
											"            \"id\", \"title\", \"revisions\", \"delivery_time_in_days\", \"price\", \"features\", \"offer_type\"\r",
											"        ];\r",
											"\r",
											"        requiredOfferDetailsFields.forEach(field => {\r",
											"            pm.expect(detail).to.have.property(field);\r",
											"        });\r",
											"\r",
											"        // Check if features is an array\r",
											"        pm.expect(detail.features).to.be.an('array');\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{user_token_id25_b}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Updated Grafikdesign-Paket\",\r\n  \"details\": [\r\n    {\r\n      \"title\": \"Basic Design Updated\",\r\n      \"revisions\": 3,\r\n      \"delivery_time_in_days\": 6,\r\n      \"price\": 120,\r\n      \"features\": [\r\n        \"Logo Design\",\r\n        \"Flyer\"\r\n      ],\r\n      \"offer_type\": \"basic\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/offers/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"offers",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "offers/id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE = pm.response;\r",
											"const RESPONSE_JSON = RESPONSE.json();\r",
											"\r",
											"pm.test(\"Status code is 204\", () => {\r",
											"    pm.expect(RESPONSE.code).to.eql(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{user_token_id25_b}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/offers/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"offers",
										"1"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Unhappy path",
			"item": [
				{
					"name": "Auth",
					"item": [
						{
							"name": "400 Registration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const username = pm.variables.replaceIn(\"{{$randomUserName}}\")\r",
											"const email = pm.variables.replaceIn(\"{{$randomEmail}}\")\r",
											"\r",
											"pm.variables.set('username', username)\r",
											"pm.variables.set('email', email)\r",
											"\r",
											"console.log(username, email)"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE = pm.response;\r",
											"const RESPONSE_JSON = RESPONSE.json();\r",
											"\r",
											"pm.test(\"400 - Email is already in use\", () => {\r",
											"   pm.expect(RESPONSE).to.have.status(400);\r",
											"   pm.expect(RESPONSE_JSON).to.have.property('email');\r",
											"   pm.expect(RESPONSE_JSON.email[0]).to.eql(\"Email is already in use.\");\r",
											"})\r",
											"\r",
											"pm.test(\"400 - Passwords do not match....\", () => {\r",
											"    pm.expect(RESPONSE).to.have.status(400);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{username}}\",\r\n  \"email\": \"example@mail.de\",\r\n  \"password\": \"asdasdasd\",\r\n  \"repeated_password\": \"asdasdas\",\r\n  \"type\": \"business\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}api/registration/",
									"host": [
										"{{base_url}}api"
									],
									"path": [
										"registration",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "400 login_user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE = pm.response;\r",
											"const RESPONSE_JSON = RESPONSE.json();\r",
											"\r",
											"pm.test(\"Error response validation\", () => {\r",
											"    pm.expect(RESPONSE.code).to.equal(400);\r",
											"    \r",
											"    if (RESPONSE_JSON.error === 'Email and password are required.') {\r",
											"        pm.expect(RESPONSE_JSON.error).to.eql('Email and password are required.');\r",
											"    } else {\r",
											"        // FÃ¼r beide anderen FÃ¤lle - ungÃ¼ltige Email oder Passwort\r",
											"        pm.expect(RESPONSE_JSON).to.have.property('error', 'Invalid credentials.');\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"Isaias10@yahoo.com\",\r\n    \"password\": \"asdasdas\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}api/login/",
									"host": [
										"{{base_url}}api"
									],
									"path": [
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "401 profile/{pk}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE = pm.response;\r",
											"const RESPONSE_JSON = RESPONSE.json();\r",
											"\r",
											"pm.test(\"401 - Unauthorized if not authenticated\", () => {\r",
											"    pm.expect(RESPONSE.code).to.equal(401);\r",
											"    pm.expect(RESPONSE_JSON).to.have.property('detail');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}api/profile/27/",
									"host": [
										"{{base_url}}api"
									],
									"path": [
										"profile",
										"27",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "404 profile/{pk}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE = pm.response;\r",
											"const RESPONSE_JSON = RESPONSE.json();\r",
											"\r",
											"pm.test(\"404 - Profile not found\", () => {\r",
											"    pm.expect(RESPONSE.code).to.equal(404);\r",
											"    pm.expect(RESPONSE_JSON).to.have.property('detail', \"No UserProfile matches the given query.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{user_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}api/profile/5/",
									"host": [
										"{{base_url}}api"
									],
									"path": [
										"profile",
										"5",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "401 profile/{pk}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE = pm.response;\r",
											"const RESPONSE_JSON = RESPONSE.json();\r",
											"\r",
											"pm.test(\"401 - Unauthorized if not authenticated\", () => {\r",
											"    pm.expect(RESPONSE.code).to.equal(401);\r",
											"    pm.expect(RESPONSE_JSON).to.have.property('detail');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{user_token}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Token {{user_token_id27}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"first_name\": \"Mila\",\r\n  \"last_name\": \"Moppelina\",\r\n  \"location\": \"Berlin\",\r\n  \"tel\": \"987654321\",\r\n  \"description\": \"Updated business description\",\r\n  \"working_hours\": \"10-18\",\r\n  \"email\": \"new_email@business.de\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}api/profile/27/",
									"host": [
										"{{base_url}}api"
									],
									"path": [
										"profile",
										"27",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "403 profile/{pk} forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE = pm.response;\r",
											"const RESPONSE_JSON = RESPONSE.json();\r",
											"\r",
											"pm.test(\"403 - Unauthorized if authenticated, but not profile owner\", () => {\r",
											"    pm.expect(RESPONSE.code).to.equal(403);\r",
											"    pm.expect(RESPONSE_JSON).to.have.property('detail');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{user_token}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Token {{user_token_id27}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"first_name\": \"Mila\",\r\n  \"last_name\": \"Moppelina\",\r\n  \"location\": \"Berlin\",\r\n  \"tel\": \"987654321\",\r\n  \"description\": \"Updated business description\",\r\n  \"working_hours\": \"10-18\",\r\n  \"email\": \"new_email@business.de\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}api/profile/27/",
									"host": [
										"{{base_url}}api"
									],
									"path": [
										"profile",
										"27",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "404 profile/{pk} not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE = pm.response;\r",
											"const RESPONSE_JSON = RESPONSE.json();\r",
											"\r",
											"pm.test(\"404 - No user profile found\", () => {\r",
											"    pm.expect(RESPONSE.code).to.equal(404);\r",
											"    pm.expect(RESPONSE_JSON).to.have.property('detail');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{user_token}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Token {{user_token_id27}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"first_name\": \"Mila\",\r\n  \"last_name\": \"Moppelina\",\r\n  \"location\": \"Berlin\",\r\n  \"tel\": \"987654321\",\r\n  \"description\": \"Updated business description\",\r\n  \"working_hours\": \"10-18\",\r\n  \"email\": \"new_email@business.de\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}api/profile/1/",
									"host": [
										"{{base_url}}api"
									],
									"path": [
										"profile",
										"1",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "401 profile/business/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE = pm.response;\r",
											"const RESPONSE_JSON = RESPONSE.json();\r",
											"\r",
											"\r",
											"pm.test(\"401 - Unauthorized if not authenticated\", () => {\r",
											"    pm.expect(RESPONSE.code).to.equal(401);\r",
											"    pm.expect(RESPONSE_JSON).to.have.property('detail')\r",
											"})\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}api/profile/business/",
									"host": [
										"{{base_url}}api"
									],
									"path": [
										"profile",
										"business",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "401 profile/customer/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE = pm.response;\r",
											"const RESPONSE_JSON = RESPONSE.json();\r",
											"\r",
											"\r",
											"pm.test(\"401 - Unauthorized if not authenticated\", () => {\r",
											"    pm.expect(RESPONSE.code).to.equal(401);\r",
											"    pm.expect(RESPONSE_JSON).to.have.property('detail')\r",
											"})\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}api/profile/customer/",
									"host": [
										"{{base_url}}api"
									],
									"path": [
										"profile",
										"customer",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Offers",
					"item": [
						{
							"name": "400 offers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE = pm.response;\r",
											"const RESPONSE_JSON = RESPONSE.json();\r",
											"\r",
											"pm.test(\"400 - Invalid request data\", () => {\r",
											"    pm.expect(RESPONSE.code).to.eql(400);\r",
											"})\r",
											"\r",
											"const queryParams = pm.request.url.query;\r",
											"\r",
											"// Define the required query parameters\r",
											"const requiredParams = ['creator_id', 'min_price', 'max_delivery_time', 'ordering', 'search', 'page_size'];\r",
											"\r",
											"// Check if each required query parameter is present\r",
											"requiredParams.forEach(param => {\r",
											"    pm.test(`Query parameter \"${param}\" is present`, function () {\r",
											"        pm.expect(queryParams.has(param)).to.be.true;\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}api/offers/",
									"host": [
										"{{base_url}}api"
									],
									"path": [
										"offers",
										""
									],
									"query": [
										{
											"key": "min_price",
											"value": "10",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 offers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE = pm.response;\r",
											"const RESPONSE_JSON = RESPONSE.json();\r",
											"\r",
											"pm.test(\"400 - Bad request\", () => {\r",
											"    pm.expect(RESPONSE.code).to.eql(400);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Grafikdesign-Paket\",\r\n  \"image\": null,\r\n  \"description\": \"Ein umfassendes Grafikdesign-Paket fÃ¼r Unternehmen.\",\r\n  \"details\": [\r\n    {\r\n      \"title\": \"Basic Design\",\r\n      \"revisions\": 2,\r\n      \"delivery_time_in_days\": 5,\r\n      \"price\": 100,\r\n      \"features\": [\r\n        \"Logo Design\",\r\n        \"Visitenkarte\"\r\n      ],\r\n      \"offer_type\": \"basic\"\r\n    },\r\n    {\r\n      \"title\": \"Standard Design\",\r\n      \"revisions\": 5,\r\n      \"delivery_time_in_days\": 7,\r\n      \"price\": 200,\r\n      \"features\": [\r\n        \"Logo Design\",\r\n        \"Visitenkarte\",\r\n        \"Briefpapier\"\r\n      ],\r\n      \"offer_type\": \"standard\"\r\n    },\r\n    {\r\n      \"title\": \"Premium Design\",\r\n      \"revisions\": 10,\r\n      \"delivery_time_in_days\": 10,\r\n      \"price\": 500,\r\n      \"features\": [\r\n        \"Logo Design\",\r\n        \"Visitenkarte\",\r\n        \"Briefpapier\",\r\n        \"Flyer\"\r\n      ],\r\n      \"offer_type\": \"premium\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}api/offers/",
									"host": [
										"{{base_url}}api"
									],
									"path": [
										"offers",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "401 offers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE = pm.response;\r",
											"const RESPONSE_JSON = RESPONSE.json();\r",
											"\r",
											"pm.test(\"401 - User is not authenticated\", () => {\r",
											"    pm.expect(RESPONSE.code).to.eql(401);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Grafikdesign-Paket\",\r\n  \"image\": null,\r\n  \"description\": \"Ein umfassendes Grafikdesign-Paket fÃ¼r Unternehmen.\",\r\n  \"details\": [\r\n    {\r\n      \"title\": \"Basic Design\",\r\n      \"revisions\": 2,\r\n      \"delivery_time_in_days\": 5,\r\n      \"price\": 100,\r\n      \"features\": [\r\n        \"Logo Design\",\r\n        \"Visitenkarte\"\r\n      ],\r\n      \"offer_type\": \"basic\"\r\n    },\r\n    {\r\n      \"title\": \"Standard Design\",\r\n      \"revisions\": 5,\r\n      \"delivery_time_in_days\": 7,\r\n      \"price\": 200,\r\n      \"features\": [\r\n        \"Logo Design\",\r\n        \"Visitenkarte\",\r\n        \"Briefpapier\"\r\n      ],\r\n      \"offer_type\": \"standard\"\r\n    },\r\n    {\r\n      \"title\": \"Premium Design\",\r\n      \"revisions\": 10,\r\n      \"delivery_time_in_days\": 10,\r\n      \"price\": 500,\r\n      \"features\": [\r\n        \"Logo Design\",\r\n        \"Visitenkarte\",\r\n        \"Briefpapier\",\r\n        \"Flyer\"\r\n      ],\r\n      \"offer_type\": \"premium\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}api/offers/",
									"host": [
										"{{base_url}}api"
									],
									"path": [
										"offers",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "403 offers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE = pm.response;\r",
											"const RESPONSE_JSON = RESPONSE.json();\r",
											"\r",
											"pm.test(\"403 - Forbidden, authenticated User is no business user\", () => {\r",
											"    pm.expect(RESPONSE.code).to.eql(403);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Grafikdesign-Paket\",\r\n  \"image\": null,\r\n  \"description\": \"Ein umfassendes Grafikdesign-Paket fÃ¼r Unternehmen.\",\r\n  \"details\": [\r\n    {\r\n      \"title\": \"Basic Design\",\r\n      \"revisions\": 2,\r\n      \"delivery_time_in_days\": 5,\r\n      \"price\": 100,\r\n      \"features\": [\r\n        \"Logo Design\",\r\n        \"Visitenkarte\"\r\n      ],\r\n      \"offer_type\": \"basic\"\r\n    },\r\n    {\r\n      \"title\": \"Standard Design\",\r\n      \"revisions\": 5,\r\n      \"delivery_time_in_days\": 7,\r\n      \"price\": 200,\r\n      \"features\": [\r\n        \"Logo Design\",\r\n        \"Visitenkarte\",\r\n        \"Briefpapier\"\r\n      ],\r\n      \"offer_type\": \"standard\"\r\n    },\r\n    {\r\n      \"title\": \"Premium Design\",\r\n      \"revisions\": 10,\r\n      \"delivery_time_in_days\": 10,\r\n      \"price\": 500,\r\n      \"features\": [\r\n        \"Logo Design\",\r\n        \"Visitenkarte\",\r\n        \"Briefpapier\",\r\n        \"Flyer\"\r\n      ],\r\n      \"offer_type\": \"premium\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}api/offers/",
									"host": [
										"{{base_url}}api"
									],
									"path": [
										"offers",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "401 offers/id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE = pm.response;\r",
											"const RESPONSE_JSON = RESPONSE.json();\r",
											"\r",
											"pm.test(\"401 - User is not authenticated\", () => {\r",
											"    pm.expect(RESPONSE.code).to.eql(401);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/offers/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"offers",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 offers/id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE = pm.response;\r",
											"const RESPONSE_JSON = RESPONSE.json();\r",
											"\r",
											"pm.test(\"404 - Offer not found\", () => {\r",
											"    pm.expect(RESPONSE.code).to.eql(404);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{user_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/offers/56",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"offers",
										"56"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 offers/id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE = pm.response;\r",
											"const RESPONSE_JSON = RESPONSE.json();\r",
											"\r",
											"pm.test(\"400 - \", () => {\r",
											"    pm.expect(RESPONSE.code).to.eql(400);\r",
											"})\r",
											"\r",
											"pm.test(\"API don't accepts detail without offer_type\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(RESPONSE_JSON.detail).to.include(\"offer_type\");\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{user_token_id25_b}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/offers/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"offers",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 offers/id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE = pm.response;\r",
											"const RESPONSE_JSON = RESPONSE.json();\r",
											"\r",
											"pm.test(\"401 - User is not authenticated\", () => {\r",
											"    pm.expect(RESPONSE.code).to.eql(401);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/offers/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"offers",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "403 offers/id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE = pm.response;\r",
											"const RESPONSE_JSON = RESPONSE.json();\r",
											"\r",
											"pm.test(\"403 - User is not offer-owner\", () => {\r",
											"    pm.expect(RESPONSE.code).to.eql(403);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{user_token_id27}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/offers/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"offers",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 offers/id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE = pm.response;\r",
											"const RESPONSE_JSON = RESPONSE.json();\r",
											"\r",
											"pm.test(\"404 - Offer not found\", () => {\r",
											"    pm.expect(RESPONSE.code).to.eql(404);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{user_token_id27}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/offers/56",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"offers",
										"56"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 offers/id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE = pm.response;\r",
											"const RESPONSE_JSON = RESPONSE.json();\r",
											"\r",
											"pm.test(\"401 - User is not authenticated\", () => {\r",
											"    pm.expect(RESPONSE.code).to.eql(401);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/offers/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"offers",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "403 offers/id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE = pm.response;\r",
											"const RESPONSE_JSON = RESPONSE.json();\r",
											"\r",
											"pm.test(\"403 - User is not offer-owner\", () => {\r",
											"    pm.expect(RESPONSE.code).to.eql(403);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{user_token_id27}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/offers/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"offers",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 offers/id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const RESPONSE = pm.response;\r",
											"const RESPONSE_JSON = RESPONSE.json();\r",
											"\r",
											"pm.test(\"404 - Offer not found\", () => {\r",
											"    pm.expect(RESPONSE.code).to.eql(404);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{user_token_id27}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/offers/56",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"offers",
										"56"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "user_token_id27",
			"value": ""
		},
		{
			"key": "user_token_id25_b",
			"value": ""
		}
	]
}